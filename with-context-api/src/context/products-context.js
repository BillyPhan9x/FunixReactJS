import React, { useState } from "react";

// T·∫°o bi·∫øn const ProductsContext 'ch·ªØ P & C vi·∫øt hoa v√¨ s·∫Ω use l√†m 1 component . Qu·∫£n l√Ω {} c√≥ attribute products ch·ª©a 1 m·∫£ng c√°c products (all value context ch·ªâ l√† 1 m·∫£ng). Case c√≥ c√°c tr∆∞·ªùng # th√¨ ph·∫£i th√™m 1 {}
export const ProductsContext = React.createContext({
  products: [],
  toggleFav: (id) => {}, // // add h√†m v√†o initial, nh·∫≠n id l√†m tham s·ªë ƒë·ªÉ IDE h·ªó tr·ª£ t·ªët h∆°n, bi·∫øt c·∫ßn truy·ªÅn id v√†o h√†m khi g·ªçi
});
// => ƒê√£ t·∫°o xong {} context

// C·∫ßn xu·∫•t default 1 component, nh·∫≠n 1 props v√† return some code JSX. (xu·∫•t 1 component h√†m nh∆∞ b√¨nh th∆∞·ªùng)
// Cung c·∫•p context cho all nh·ªØng g√¨ ƒë∆∞·ª£c truy·ªÅn v√†o trong vs props.children
export default (props) => {
  // Do value changed n√™n use hook useState() t·ª´ react ƒë·ªÉ qu·∫£n l√Ω state
  const [productsList, setProductsList] = useState([
    {
      id: "p1",
      title: "Red Scarf",
      description: "A pretty red scarf.",
      isFavorite: false,
    },
    {
      id: "p2",
      title: "Blue T-Shirt",
      description: "A pretty blue t-shirt.",
      isFavorite: false,
    },
    {
      id: "p3",
      title: "Green Trousers",
      description: "A pair of lightly green trousers.",
      isFavorite: false,
    },
    {
      id: "p4",
      title: "Orange Hat",
      description: "Street style! An orange hat.",
      isFavorite: false,
    },
  ]);

  // T·∫°o h√†m arrow function nh·∫≠n tham s·ªë productId (√Ω t∆∞·ªüng l√† chuy·ªÉn ƒë·ªïi gi·ªØa status favoris v√† 0 favorite of a product)
  const toggleFavorite = (productId) => {
    // G·ªçi setProductsList nh·∫≠n currentProductList, tr·∫£ v·ªÅ a list new (d·ª±a tr√™n list old).
    setProductsList((currentProdList) => {
      const prodIndex = currentProdList.findIndex((p) => p.id === productId);
      console.log("prodIndex", prodIndex);
      const newFavStatus = !currentProdList[prodIndex].isFavorite;
      console.log("newFavStatus", newFavStatus);
      const updatedProducts = [...currentProdList];
      updatedProducts[prodIndex] = {
        ...currentProdList[prodIndex],
        isFavorite: newFavStatus,
      };
      console.log("updatedProducts", updatedProducts);
      // Tr·∫£ v·ªÅ updatedProducts d·ª±a tr√™n list c≈© v√† use n√≥ = c√°ch copy all attributes c·ªßa items c≈© in list v√† replace = newFavStatus.
      return updatedProducts;
    });
  };

  return (
    <ProductsContext.Provider
      value={{ products: productsList, toggleFav: toggleFavorite }}
    >
      {props.children}
    </ProductsContext.Provider>
  );
};

// üìå Th∆∞·ªùng hook n√†y ch·ªâ use dc vs components function, nh∆∞ng x√©t v·ªÅ m·∫∑t l√Ω thuy·∫øt th√¨ c≈©ng CAN use dc vs components d·ª±a tr√™n l·ªõp.

// Syntax h√†m ƒë·∫£m b·∫£o nh·∫≠n ƒë∆∞·ª£c tr·∫°ng th√°i m·ªõi nh·∫•t (qu·∫£n l√Ω tr·∫°ng th√°i vs tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥)

// custom th√™m cho context v√† use context cho th√†nh ph·∫ßn Products
// - Th√™m togleFav v√†o {} dc truy·ªÅn v√†o l√†m value cho ProductsContext.Provider
// ==> ·ªû eveywhere c√≥ use context, You Can call h√†m n√†y v√† h√†m n√†y s·∫Ω change 1 th·ª© g√¨ ƒë√≥ trong file, change status, t·ª´ ƒë√≥ tr·∫£ v·ªÅ 1 status m·ªõi, 1 value m·ªõi cho components ƒëang nghe context.

//üìå  T·ªïng k·∫øt v·ªÅ Context API (t·∫°i sao 0 d√πng Context API thay cho Redux ƒë∆∞·ª£c?)
//- React Context ph√π h·ª£p vs nh·ªØng UD c√≥ s·ªë l·∫ßn c·∫≠p nh·∫≠t hay Change th·∫•p. Context 0 h·ªØu hi·ªáu l·∫Øm khi d·ªØ li·ªáu c·∫ßn Change li√™n t·ª•c
// - Gi·∫£ s·ª≠ tr·∫°ng th√°i x√°c th·ª±c user,ch·ªß ƒë·ªÅ, moduls ph·∫£n ·ª©ng hooks

// Ho·∫°t ƒë·ªông c·ªßa Context API
// - anywhen c√≥ ƒëi·ªÅu g√¨ ƒë√≥ changed tronng ng·ªØ c·∫£nh, n√≥ 0 c√≥ c√°ch n√†o t√¨m ra th√†nh ph·∫ßn n√†o use ng·ªØ c·∫£nh n√†y 1 c√°ch th√¥ng minh.
// - API ng·ªØ c·∫£nh ch·ªâ simple l√† 0 dc t·ªëi ∆∞u ho√° v√† 0 c√≥ c√¥ng c·ª• qu·∫£n l√Ω tr·∫°ng th√°i to√†n c·∫ßu trong UD

//üìå Tr·∫°ng th√°i Favorites 0 n√™n qu·∫£n l√Ω b·ªüi Context API do c√≥ t·∫ßn su·∫•t Change cao
