import React, { useEffect, useState } from "react";

import useHttp from "./hooks/use-http";
import Tasks from "./components/Tasks/Tasks";
import NewTask from "./components/NewTask/NewTask";

function App() {
  const [tasks, setTasks] = useState([]);

  // ƒê·∫∑t t√™n h√†m v√† nh·∫≠n tham s·ªë l√† 1 ƒë·ªëi t∆∞·ª£ng task
  const transformTasks = (taskObj) => {
    // √°p d·ª•ng logic chuy·ªÉn ƒë·ªïi
    const loadedTasks = [];
    // l·∫∑p qua ƒë·ªëi t∆∞·ª£ng taskObj vs v√≤ng l·∫∑p for in => ƒê·ªÉ chuy·ªÉn ƒë·ªïi all c√°c ƒë·ªëi t∆∞·ª£ng l·∫•y dc t·ª´ Firebase th√†nh c√°c ƒë·ªëi t∆∞·ª£ng c√≥ c·∫•u tr√∫c v√† ƒë·ªãnh d·∫°ng ph√π h·ª£p.
    for (const taskKey in taskObj) {
      loadedTasks.push({ id: taskKey, text: taskObj[taskKey].text });
    }
    // Thi·∫øt l·∫≠p tr·∫°ng th√°i tasks (c·∫≠p nh·∫≠t tr·∫°ng th√°i)
    setTasks(loadedTasks);
  };

  // g·ªçi useHttp hook custom v√† l∆∞u gi√° tr·ªã v√†o bi·∫øn h·∫±ng s·ªë
  const httpData = useHttp();

  // L·∫•y ra c√°c gi√° tr·ªã tr·∫£ v·ªÅ t·ª´ Hook useHttp()
  const { isLoading, error, sendRequest: fetchTasks } = httpData;

  useEffect(() => {
    // Truy·ªÅn 1 con tr·ªè ƒë·∫øn h√†m transformTasks l√†m ƒë·ªëi s·ªë th·ª© 2.
    fetchTasks(
      {
        url: "https://react-pvt-http-default-rtdb.firebaseio.com//tasks.json",
      },
      transformTasks
    );
  }, [fetchTasks]);

  const taskAddHandler = (task) => {
    setTasks((prevTasks) => prevTasks.concat(task));
  };

  return (
    <React.Fragment>
      <NewTask onAddTask={taskAddHandler} />
      <Tasks
        items={tasks}
        loading={isLoading}
        error={error}
        onFetch={fetchTasks}
      />
    </React.Fragment>
  );
}

export default App;

// ƒê·ªëi vs requestConfig th√¨ truy·ªÅn v√†o 1 ƒë·ªëi t∆∞·ª£ng c√≥ 1 thu·ªôc t√≠nh URL v√¨ b√™n trong hook custom ƒëang truy c·∫≠p 1 thu·ªôc t√≠nh URL.
// - ƒê·ªëi vs App ch·ªâ mu·ªën t√¨m n·∫°p d·ªØ li·ªáu, c·∫ßn g·ª≠i 1 y/c GET n√™n ko c·∫ßn method, body, headers.

// Cung c·∫•p ƒë·ªëi s·ªë th·ª© 2 l√† h√†m applyData() nh·∫≠n ƒë·ªëi s·ªë l√† data.
// - ƒê∆∞a logic ra ngo√†i ƒë·ªÉ cho d·ªÖ ƒë·ªçc, d·ªÖ nh√¨n. X√°c ƒë·ªãnh h√†m ƒë√≥ trc khi g·ªçi.
// useHttp() s·∫Ω g·ªçi h√†m transformTasks whenever nh·∫≠n dc ph·∫£n h·ªìi.

// use k·ªπ thu·∫≠t destructuring = c√°ch tr·ªè ƒë·∫øn httpData v√† t·ª´ ƒë√≥ l·∫•y ra d·ªØ li·ªáu isLoading, error, sendRequest.
// - ch·ªâ ƒë·ªãnh 1 alias( 1 t√≠nh nƒÉng c√≥ trong JS) = b·∫±ng th√™m d·∫•u : v√†o trong syntax destructuring v√† ƒë·∫∑t cho sendRequest 1 c√°i t√™n # l√† fetchTasks.
// - v·∫´n tr·ªè ƒë·∫øn h√†m sendRequest t·ª´ hook custom ch·ªâ l√† ƒë·ªïi t√™n h√†m b√™n trong h√†m th√†nh ph·∫ßn App.

// üìåM·ªçi d·ªØ li·ªáu or h√†m dc thi·∫øt l·∫≠p b√™n trong 1 h√†m th√†nh ph·∫ßn v√† dc use trong useEffect() ph·∫£i dc truy·ªÅn v√†o useEffect() d∆∞·ªõi d·∫°ng 1 ph·ª• thu·ªôc.
// Vi·ªác th√™m fetchTasks l√†m ph·ª• thu·ªôc trong useEffect() s·∫Ω t·∫°o ra 1 v√≤ng l·∫∑p v√¥ h·∫°n.
//  - B·ªüi v√¨ khi g·ªçi fetchTasks() h√†m n√†y s·∫Ω th·ª±c thi h√†m sendRequest trong hook useHttp().
//  - H√†m sendRequest sau ƒë√≥ s·∫Ω thi·∫øt l·∫≠p 1 s·ªë tr·∫°ng th√°i. Khi c√°c state dc thi·∫øt l·∫≠p, th√†nh ph·∫ßn use hook custom s·∫Ω dc hi·ªÉn th·ªã l·∫°i.

// - Gi·∫£i th√≠ch:
//     - Khi use hook t√πy ch·ªânh, hook n√†y l·∫°i use tr·∫°ng th√°i, hook l·∫°i n·∫±m trong 1 th√†nh ph·∫ßn th√¨ th√†nh ph·∫ßn ƒë√≥ s·∫Ω ng·∫ßm use tr·∫°ng th√°i dc thi·∫øt l·∫≠p trong hook t√πy ch·ªânh.
//     - Tr·∫°ng th√°i dc ƒë·ªãnh c·∫•u h√¨nh trong hook custom s·∫Ω dc g·∫Øn v√†o th√†nh ph·∫ßn use hook custom.
//   - V√¨ v·∫≠y, n·∫øu ta g·ªçi setIsLoading v√† setError trong h√†m sendRequest trong hook custom th√¨ s·∫Ω k√≠ch ho·∫°t vi·ªác ƒë√°nh gi√° l·∫°i th√†nh ph·∫ßn App. V√¨ ƒëang use hook custom useHttp() ngay trong App.
//   - V√† khi th√†nh ph·∫ßn dc ƒë√°nh gi√° l·∫°i, hook custom s·∫Ω dc g·ªçi l·∫°i, m√† khi hook custom dc g·ªçi l·∫°i, ta s·∫Ω t·∫°o l·∫°i h√†m sendRequest v√† tr·∫£ v·ªÅ 1 ƒë·ªëi t∆∞·ª£ng h√†m m·ªõi.
//   => Do ƒë√≥, useEffect() s·∫Ω ch·∫°y l·∫°i.
// - ƒêi·ªÅu ƒë√≥ x√£y ra v√¨ : Gi·∫£i th√≠ch:
//  - C√°c h√†m l√† c√°c ƒë·ªëi t∆∞·ª£ng trong JS. M·ªói khi 1 h√†m dc t·∫°o l·∫°i th√¨ ngay c·∫£ khi n√≥ ch·ª©a c√πng 1 logic c≈©, n√≥ v·∫´n s·∫Ω dc coi l√† 1 ƒë·ªëi t∆∞·ª£ng ho√†n to√†n m·ªõi trong b·ªô nh·ªõ.
//  => Do ƒë√≥ , useEffect() s·∫Ω coi h√†m l√† 1 h√†m m·ªõi. (v·ªÅ m·∫∑t k·ªπ thu·∫≠t v·∫´n l√† h√†m ƒë√≥) => useEffect() s·∫Ω th·ª±c thi l·∫°i h√†m.
// ==> Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ vs useCallback() trong file hook custom vs h√†m sendRequest
