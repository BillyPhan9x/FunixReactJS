import { Fragment } from "react";
// cho ph√©p change history page => cho ph√©p change URL
import { useHistory, useLocation } from "react-router-dom";

import QuoteItem from "./QuoteItem";
import classes from "./QuoteList.module.css";

// H√†m ph·ª• tr·ª£ nh·ªè c√≥ t√°c d·ª•ng sort 1 m·∫£ng quotes theo ID.
const sortQuotes = (quotes, ascending) => {
  return quotes.sort((quoteA, quoteB) => {
    if (ascending) {
      return quoteA.id > quoteB.id ? 1 : -1;
    } else {
      return quoteA.id < quoteB.id ? 1 : -1;
    }
  });
};

const QuoteList = (props) => {
  const history = useHistory(); // nh·∫≠n v·ªÅ 1 {}
  const location = useLocation(); // nh·∫≠n v·ªÅ 1 {}

  // convert thu·ªôc t√≠nh search th√†nh 1 {} JS ƒë·ªÉ d·ªÖ use h∆°n thay v√¨ d√πng chu·ªói. (t√≠ch h·ª£p s·∫µn v√†o browse)
  const queryParams = new URLSearchParams(location.search);
  // use queryParams v√† g·ªçi method get('key') v√† ki·ªÉm tra vs value
  const isSortingAscending = queryParams.get("sort") === "asc";

  // props.quotes: ƒë·ªÉ nh·∫≠n c√°c quotes th√¥ng qua prop, isSortingAscending: th·ª© t·ª± s·∫Øp x·∫øp l√† 1 boolean
  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);

  // Trong n√∫t th√™m 1 listener onClick v√† active 1 h√†m khi n√∫t dc nh·∫•n.
  const changeSortingHandler = () => {
    // Kh·∫Øc ph·ª•c code c√≥ th·ªÉ qu√° d√†i v√† c·∫ßn c·∫£i thi·ªán => V√¨ l√Ω do ƒë√≥, React Router cho ph√©p ta use 1 m√¥ t·∫£ place c·ªßa ƒë√≠ch ƒë·∫øn of 1 link, hay ƒëi·ªÅu h∆∞·ªõng.
    history.push({
      pathname: location.pathname, // pathname: '/quotes'
      search: `?sort=${isSortingAscending ? "desc" : "asc"}`,
    });

    // history.push(
    //   `${location.pathname}?sort=${isSortingAscending ? "desc" : "asc"}`
    // );

    // code c·ª©ng + ƒë·ªông
    // history.push("/quotes?sort=" + (isSortingAscending ? "desc" : "asc"));
  };

  return (
    <Fragment>
      <div className={classes.sorting}>
        <button onClick={changeSortingHandler}>
          Sort {isSortingAscending ? "Descending" : "Ascending"}
        </button>
      </div>
      <ul className={classes.list}>
        {sortedQuotes?.map((quote) => (
          <QuoteItem
            key={quote.id}
            id={quote.id}
            author={quote.author}
            text={quote.text}
          />
        ))}
      </ul>
    </Fragment>
  );
};

export default QuoteList;
// k·∫øt xu·∫•t 1 list 0 c√≥ th·ª© t·ª± (ul) k·∫øt xu·∫•t 1 lo·∫°t c√°c QuoteItem.

//////---- m√£ code c·ª©ng ----//////////////
/*
import { Fragment } from "react";
// cho ph√©p change history page => cho ph√©p change URL
import { useHistory, useLocation } from "react-router-dom";

import QuoteItem from "./QuoteItem";
import classes from "./QuoteList.module.css";

const QuoteList = (props) => {
  const history = useHistory(); // nh·∫≠n v·ªÅ 1 {}
  // console.log("history", history)
  const location = useLocation(); // nh·∫≠n v·ªÅ 1 {}
  console.log("location", location); // pathname, search

  // convert thu·ªôc t√≠nh search th√†nh 1 {} JS ƒë·ªÉ d·ªÖ use h∆°n thay v√¨ d√πng chu·ªói. (t√≠ch h·ª£p s·∫µn v√†o browse)
  const queryParams = new URLSearchParams(location.search);
  // use queryParams v√† g·ªçi method get('key') v√† ki·ªÉm tra vs value
  const isSortingAscending = queryParams.get("sort") === "asc";

  // Trong n√∫t th√™m 1 listener onClick v√† active 1 h√†m khi n√∫t dc nh·∫•n.
  const changeSortingHandler = () => {
    // change URL v√† param query dc add v√†o
    history.push("/quotes?sort=asc");
  };

  return (
    <Fragment>
      <div className={classes.sorting}>
        <button onClick={changeSortingHandler}>Sort Ascending</button>
      </div>
      <ul className={classes.list}>
        {props.quotes.map((quote) => (
          <QuoteItem
            key={quote.id}
            id={quote.id}
            author={quote.author}
            text={quote.text}
          />
        ))}
      </ul>
    </Fragment>
  );
};

// k·∫øt xu·∫•t 1 list 0 c√≥ th·ª© t·ª± (ul) k·∫øt xu·∫•t 1 lo·∫°t c√°c QuoteItem.
export default QuoteList;
*/

/* üìåKh√°i ni·ªám param Query
L√† param ƒë·∫∑c bi·ªát c√≥ trong 1 s·ªë URL. N√≥ n·∫±m ·ªü cu·ªëi c√°c URL. Tr√™n 1 s·ªë URL ta s·∫Ω th·∫•y  s·ªë d·∫•u '?' sau ƒë√≥ l√† params truy·ªÅn d·ªØ li·ªáu b·ªï sung v√†o page ƒë√£ dc t·∫£i.
(00:25) S·ª± # bi·ªát gi·ªØa param Query(truy v·∫•n) & param (route) th√¥ng th∆∞·ªùng
V√≠ d·ª• trong project: tham s·ªë quoteId.
- Tham s·ªë th√¥ng th∆∞·ªùng: b·∫Øt bu·ªôc
V√≠ d·ª•: trang QuoteDetail ch·ªâ dc t·∫£i n·∫øu c√≥ ID (quoteId)
- Tham s·ªë truy v·∫•n: 0 b·∫Øt bu·ªôc
-- D·∫•u '?' 0 change vi·ªác so kh·ªõp route. 
--- 0 ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác ƒë·ªëi chi·∫øu xem route n√†o tr√πng kh·ªõp
--- Nh∆∞ng route n√†o ph√π h·ª£p c≈©ng ƒë·ªÅu s·∫Ω c√≥ quy·ªÅn truy c·∫≠p v√†o d·ªØ li·ªáu tham s·ªë truy v·∫•n.(VD: ƒë·ªÉ change action of page dc t·∫£i.

  üìå√ù nghƒ©a c·ªßa param Query qua v√≠ d·ª•
- Tr√™n trang Quote List Page, ta mu·ªën tri·ªÉn khai vi·ªác sort tr√≠ch d·∫´n.
- Gi·∫£ s·ª≠ theo th·ª© t·ª± tƒÉng d·∫ßn or gi·∫£m d·∫ßn d·ª±a v√†o ID v√† time dc add v√†o.
==> ƒê·ªÉ l√†m v·∫≠y c·∫ßn c√°c b∆∞·ªõc:
1. Th√™m ch·ª©c nƒÉng sort tr√≠ch d·∫´n. (add logic ƒë·ªÉ sort components)
2. Thi·∫øt l·∫≠p v√† use params query: ƒë·ªÉ l∆∞u th·ª© t·ª± sort hi·ªán t·∫°i (ƒë·ªÉ c√≥ th·ªÉ chia s·∫ª 1 link c√≥ some param query) 
(user # use link ƒë√≥ th√¨ quotes s·∫Ω auto dc sort nh∆∞ khi ta sort ch√∫ng tƒÉng or gi·∫£m. N·∫øu 0 c√≥ param query th√¨ quotes s·∫Ω dc sort default)

- üìåuseHistory() cho we quy·ªÅn truy c·∫≠p v√†o {} history ƒë·ªÉ change & qu·∫£n l√Ω URL
- üìåuseLocation() cung c·∫•p quy·ªÅn truy c·∫≠p ƒë·∫øn 1 {} location c√≥ infomation v·ªÅ page hi·ªán ƒëang t·∫£i v√† URL hi·ªán ƒëang t·∫£i.

‚ùó M·ªôt ƒëi·ªÅu th·ª© v·ªã l√† n·∫øu nh·∫•n n√∫t Sort Ascending, s·∫Ω th·∫•y {} location dc log li√™n t·ª•c. C√≥ nghƒ©a l√† vi·ªác ƒë·∫©y page s·∫Ω k·∫øt xu·∫•t th√†nh ph·∫ßn ƒë√≥. (do ƒë√°nh gi√° l·∫°i v√† React Router th·∫•y r·∫±ng ta ƒë√£ change history => k·∫øt xu·∫•t l·∫°i page dc hi·ªÉn th·ªã ngay c·∫£ khi ƒëang ·ªü trang ƒë√≥. 'c∆° ch·∫ø h·ªØu √≠ch')
*/
