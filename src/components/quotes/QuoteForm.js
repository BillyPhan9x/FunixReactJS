import { useState, useRef, Fragment } from "react";
import { Prompt } from "react-router-dom";

import Card from "../UI/Card";
import LoadingSpinner from "../UI/LoadingSpinner";
import classes from "./QuoteForm.module.css";

const QuoteForm = (props) => {
  // state user b·∫Øt ƒë·∫ßu nh·∫≠p d·ªØ li·ªáu or ƒë√£ start work tr√™n bi·ªÉu m·∫´u
  const [isEntering, setIsEntering] = useState(false);

  const authorInputRef = useRef();
  const textInputRef = useRef();

  function submitFormHandler(event) {
    event.preventDefault();

    const enteredAuthor = authorInputRef.current.value;
    const enteredText = textInputRef.current.value;

    // Th√™m x√°c th·ª±c v√† ƒë·∫∑t l·∫°i logic - Add validation & Reseting Logic
    if (enteredAuthor.trim().length === 0 || enteredText.trim().length === 0) {
      // h√†m c·∫≠p nh·∫≠t l·ªói
      return alert("Please enter a valid author and text ( non-empty values )");
    }

    props.onAddQuote({ author: enteredAuthor, text: enteredText });
  }

  // Th√™m 1 listener onClick tr√™n n√∫t g·ª≠i bi·ªÉu m·∫´u v√† tr·ªè v√†o h√†m s·∫Ω ƒë·ªÉ k√≠ch ho·∫°t.
  const finishEnteringHandler = () => {
    // ƒë·ªÉ b·ªè ch·∫∑n vi·ªác ƒëi·ªÅu h∆∞·ªõng sang page #
    setIsEntering(false);
  };

  const formFocusedHandler = () => {
    // thi·∫øt l·∫≠p setIsEntering th√†nh true n·∫øu h√†m n√†y dc k√≠ch ho·∫°t
    setIsEntering(true);
    // console.log("focus");
  };

  return (
    <Fragment>
      <Prompt
        when={isEntering}
        message={(location) =>
          "Are your sure you want to leave? All your entered data will be losst!"
        }
      />
      <Card>
        <form
          onFocus={formFocusedHandler}
          className={classes.form}
          onSubmit={submitFormHandler}
        >
          {props.isLoading && (
            <div className={classes.loading}>
              <LoadingSpinner />
            </div>
          )}

          <div className={classes.control}>
            <label htmlFor="author">Author</label>
            <input type="text" id="author" ref={authorInputRef} />
          </div>
          <div className={classes.control}>
            <label htmlFor="text">Text</label>
            <textarea id="text" rows="5" ref={textInputRef}></textarea>
          </div>
          <div className={classes.actions}>
            <button className="btn" onClick={finishEnteringHandler}>
              Add Quote
            </button>
          </div>
        </form>
      </Card>
    </Fragment>
  );
};

export default QuoteForm;

/* üìåL·∫≠p tr√¨nh Programmatic (Imperative) Navigation
V√≠ d·ª•: N·∫øu th√™m 1 tr√≠ch d·∫´n m·ªõi v√† y/c ƒë√≥ g·ª≠i ƒë·∫øn server, k·ª≥ v√≤ng sau ƒë√≥ dc auto ƒëi·ªÅu h∆∞·ªõng kh·ªèi page n√†y v√† ƒë·∫øn trang mong mu·ªën ch·∫≥ng h·∫°n.

- Gi·∫£i ph√°p: - Chuy·ªÉn ƒë·ªïi n√∫t (button) Add Quote trong QuoteForm th√†nh 1 li√™n k·∫øt (Link) ƒë·∫øn trang All Quotes Page.
    -- Nh∆∞ng project n√†y 0 c·∫ßn link m√† c·∫ßn 1 n√∫t g·ª≠i bi·ªÉu m·∫´u.
    --‚ùóThay v√†o ƒë√≥: c·∫ßn use ƒëi·ªÅu h∆∞·ªõng l·∫≠p tr√¨nh.
    ---- Mu·ªën active 1 action navigation v√† navigation user theo c√°ch l·∫≠p tr√¨nh trong code. (t·ª©c l√† user 0 ph·∫£i nh·∫•n v√†o link ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng m√† ch√≠nh code c·ªßa ta s·∫Ω active vi·ªác ƒëi·ªÅu h∆∞·ªõng khi action g·ª≠i d·ªØ li·ªáu dc nh·∫≠p ƒë·∫øn 1 m√°y ch·ªß ƒë√£ ho√†n th√†nh.)
*/

/* üìåMethod trong ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ useHistory()
V√≠ d·ª•: - ƒêi·ªÅu g√¨ l√†m change history pages? 
       - Khi ta th√™m 1 page new or chuy·ªÉn sang 1 page new.
       -- C√≥ th·ªÉ ƒëi·ªÅu h∆∞·ªõng vs method: 
       1. push() s·∫Ω ƒë·∫©y 1 page new v√†o ch·ªìng page (t·ª©c l√† 1 page new trong history pages)
       2. replace() ƒë·ªÉ thay th·∫ø trang hi·ªán t·∫°i.
       -- Nh∆∞·ª£c ƒëi·ªÉm:
       ---push() l√† c√≥ th·ªÉ nh·∫•n n√∫t quay l·∫°i ƒë·ªÉ tr·ªü v·ªÅ page ta ƒëang truy c·∫≠p.
       ---replace() th√¨ 0 th·ªÉ quay l·∫°i.
*/

/* üìåNgƒÉn c√°c Route Transition 0 mong mu·ªën vs "Prompt" Component
- ƒêang nh·∫≠p vƒÉn b·∫£n hay anything ch∆∞a xong nh∆∞ng v√¥ t√¨nh active backup page prev or nh·∫•n n√∫t quay l·∫°i => b·ªã ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn n∆°i # v√† all state bi·∫øn m·∫•t.
- Anything ƒëang nh·∫≠p l·ª° d·ªü v√†o bi·ªÉu m·∫´u ƒë·ªÅu b·ªã bi·∫øn m·∫•t.

- Gi·∫£i ph√°p: T·∫°i th√†nh ph·∫ßn c√≥ form (bi·ªÉu m·∫´u) th·ª±c hi·ªán 2 vi·ªác.
1. Mu·ªën xƒë th·ªùi ƒëi·ªÉm user start work vs form. ( props onFocus)
V√≠ d·ª•: khi c√°c tr∆∞·ªùng c·ªßa form dc focus.
2. Hi·ªÉn th·ªã c·∫£nh b√°o cho user, n·∫øu h·ªç r·ªùi kh·ªèi page sau khi start work tr√™n bi·ªÉu m·∫´u ƒë√≥.(Th√†nh ph·∫ßn Prompt in React Router)
- Prompt c·∫ßn 2 prop:
 1. when: truy·ªÅn v√†o prop n√†y gi√° tr·ªã true or false ƒë·ªÉ xem l·ªùi nh·∫Øc c√≥ n√™n dc hi·ªÉn th·ªã 0? (t·ª©c l√† user c√≥ change URL hay 0?)
 VD: <Prompt when={isEntering}/>
 2. message: prop n√†y nh·∫≠n 1 h√†m s·∫Ω tr·∫£ v·ªÅ 1 chu·ªói ch·ª©a vƒÉn b·∫£n ta c·∫ßn hi·ªÉn th·ªã cho user khi h·ªç r·ªùi kh·ªèi trang.

 ‚ùå L∆∞u √Ω: N·∫øu setIsEntering(false) inside h√†m submitFormHandler th√¨ 0 dc v√¨ s·∫Ω h∆°i mu·ªôn. Vi·ªác c·∫≠p nh·∫≠t state s·∫Ω 0 dc th·ª±c hi·ªán trc khi 1 action ƒëi·ªÅu h∆∞·ªõng dc k√≠ch ho·∫°t V√¨ action ƒëi·ªÅu h∆∞·ªõng s·∫Ω dc active trong onAddQuote. v√¨ ƒë√¢y l√† 1 qu√° tr√¨nh ƒë·ªìng b·ªô ch·ªâ c√≥ 1 h√†m.
*/
